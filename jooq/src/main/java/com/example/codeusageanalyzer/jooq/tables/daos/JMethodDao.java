/*
 * This file is generated by jOOQ.
*/
package com.example.codeusageanalyzer.jooq.tables.daos;


import com.example.codeusageanalyzer.jooq.tables.JMethod;
import com.example.codeusageanalyzer.jooq.tables.pojos.JMethodPojo;
import com.example.codeusageanalyzer.jooq.tables.records.JMethodRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JMethodDao extends DAOImpl<JMethodRecord, JMethodPojo, String> {

    /**
     * Create a new JMethodDao without any configuration
     */
    public JMethodDao() {
        super(JMethod.METHOD, JMethodPojo.class);
    }

    /**
     * Create a new JMethodDao with an attached configuration
     */
    public JMethodDao(Configuration configuration) {
        super(JMethod.METHOD, JMethodPojo.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(JMethodPojo object) {
        return object.getMethodId();
    }

    /**
     * Fetch records that have <code>METHOD_ID IN (values)</code>
     */
    public List<JMethodPojo> fetchByJMethodId(String... values) {
        return fetch(JMethod.METHOD.METHOD_ID, values);
    }

    /**
     * Fetch a unique record that has <code>METHOD_ID = value</code>
     */
    public JMethodPojo fetchOneByJMethodId(String value) {
        return fetchOne(JMethod.METHOD.METHOD_ID, value);
    }

    /**
     * Fetch records that have <code>CLASS_ID IN (values)</code>
     */
    public List<JMethodPojo> fetchByJClassId(String... values) {
        return fetch(JMethod.METHOD.CLASS_ID, values);
    }

    /**
     * Fetch records that have <code>DESCRIPTOR IN (values)</code>
     */
    public List<JMethodPojo> fetchByJDescriptor(String... values) {
        return fetch(JMethod.METHOD.DESCRIPTOR, values);
    }

    /**
     * Fetch records that have <code>METHOD_NAME IN (values)</code>
     */
    public List<JMethodPojo> fetchByJMethodName(String... values) {
        return fetch(JMethod.METHOD.METHOD_NAME, values);
    }
}
