/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables;


import com.example.codeusageanalyzer.jooq.DefaultSchema;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JCalleeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCallee extends TableImpl<JCalleeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CALLEE</code>
     */
    public static final JCallee CALLEE = new JCallee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCalleeRecord> getRecordType() {
        return JCalleeRecord.class;
    }

    /**
     * The column <code>CALLEE.CALLEE_ID</code>.
     */
    public final TableField<JCalleeRecord, String> CALLEE_ID = createField(DSL.name("CALLEE_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CALLEE.DESCRIPTOR</code>.
     */
    public final TableField<JCalleeRecord, String> DESCRIPTOR = createField(DSL.name("DESCRIPTOR"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CALLEE.INVOKE_DYNAMIC</code>.
     */
    public final TableField<JCalleeRecord, Boolean> INVOKE_DYNAMIC = createField(DSL.name("INVOKE_DYNAMIC"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>CALLEE.METHOD_ID</code>.
     */
    public final TableField<JCalleeRecord, String> METHOD_ID = createField(DSL.name("METHOD_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CALLEE.METHOD_NAME</code>.
     */
    public final TableField<JCalleeRecord, String> METHOD_NAME = createField(DSL.name("METHOD_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>CALLEE.OWNER_NAME</code>.
     */
    public final TableField<JCalleeRecord, String> OWNER_NAME = createField(DSL.name("OWNER_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private JCallee(Name alias, Table<JCalleeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCallee(Name alias, Table<JCalleeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CALLEE</code> table reference
     */
    public JCallee(String alias) {
        this(DSL.name(alias), CALLEE);
    }

    /**
     * Create an aliased <code>CALLEE</code> table reference
     */
    public JCallee(Name alias) {
        this(alias, CALLEE);
    }

    /**
     * Create a <code>CALLEE</code> table reference
     */
    public JCallee() {
        this(DSL.name("CALLEE"), null);
    }

    public <O extends Record> JCallee(Table<O> child, ForeignKey<O, JCalleeRecord> key) {
        super(child, key, CALLEE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JCalleeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<JCalleeRecord>> getKeys() {
        return Arrays.<UniqueKey<JCalleeRecord>>asList(Keys.CONSTRAINT_7);
    }

    @Override
    public JCallee as(String alias) {
        return new JCallee(DSL.name(alias), this);
    }

    @Override
    public JCallee as(Name alias) {
        return new JCallee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCallee rename(String name) {
        return new JCallee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCallee rename(Name name) {
        return new JCallee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, Boolean, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
