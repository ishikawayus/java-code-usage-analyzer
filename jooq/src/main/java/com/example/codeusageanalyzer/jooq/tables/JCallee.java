/*
 * This file is generated by jOOQ.
*/
package com.example.codeusageanalyzer.jooq.tables;


import com.example.codeusageanalyzer.jooq.JPublic;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JCalleeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCallee extends TableImpl<JCalleeRecord> {

    private static final long serialVersionUID = -1589206406;

    /**
     * The reference instance of <code>PUBLIC.CALLEE</code>
     */
    public static final JCallee CALLEE = new JCallee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCalleeRecord> getRecordType() {
        return JCalleeRecord.class;
    }

    /**
     * The column <code>PUBLIC.CALLEE.CALLEE_ID</code>.
     */
    public final TableField<JCalleeRecord, String> CALLEE_ID = createField("CALLEE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CALLEE.DESCRIPTOR</code>.
     */
    public final TableField<JCalleeRecord, String> DESCRIPTOR = createField("DESCRIPTOR", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CALLEE.INVOKE_DYNAMIC</code>.
     */
    public final TableField<JCalleeRecord, Boolean> INVOKE_DYNAMIC = createField("INVOKE_DYNAMIC", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CALLEE.METHOD_ID</code>.
     */
    public final TableField<JCalleeRecord, String> METHOD_ID = createField("METHOD_ID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CALLEE.METHOD_NAME</code>.
     */
    public final TableField<JCalleeRecord, String> METHOD_NAME = createField("METHOD_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CALLEE.OWNER_NAME</code>.
     */
    public final TableField<JCalleeRecord, String> OWNER_NAME = createField("OWNER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.CALLEE</code> table reference
     */
    public JCallee() {
        this("CALLEE", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CALLEE</code> table reference
     */
    public JCallee(String alias) {
        this(alias, CALLEE);
    }

    private JCallee(String alias, Table<JCalleeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCallee(String alias, Table<JCalleeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JCalleeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JCalleeRecord>> getKeys() {
        return Arrays.<UniqueKey<JCalleeRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JCallee as(String alias) {
        return new JCallee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCallee rename(String name) {
        return new JCallee(name, null);
    }
}
