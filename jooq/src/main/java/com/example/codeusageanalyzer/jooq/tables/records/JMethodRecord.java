/*
 * This file is generated by jOOQ.
*/
package com.example.codeusageanalyzer.jooq.tables.records;


import com.example.codeusageanalyzer.jooq.tables.JMethod;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JMethodRecord extends UpdatableRecordImpl<JMethodRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = -1100726409;

    /**
     * Setter for <code>PUBLIC.METHOD.METHOD_ID</code>.
     */
    public void setMethodId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.METHOD.METHOD_ID</code>.
     */
    public String getMethodId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.METHOD.CLASS_ID</code>.
     */
    public void setClassId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.METHOD.CLASS_ID</code>.
     */
    public String getClassId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.METHOD.DESCRIPTOR</code>.
     */
    public void setDescriptor(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.METHOD.DESCRIPTOR</code>.
     */
    public String getDescriptor() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.METHOD.METHOD_NAME</code>.
     */
    public void setMethodName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.METHOD.METHOD_NAME</code>.
     */
    public String getMethodName() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return JMethod.METHOD.METHOD_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return JMethod.METHOD.CLASS_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return JMethod.METHOD.DESCRIPTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return JMethod.METHOD.METHOD_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getMethodId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getClassId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getDescriptor();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getMethodName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JMethodRecord value1(String value) {
        setMethodId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JMethodRecord value2(String value) {
        setClassId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JMethodRecord value3(String value) {
        setDescriptor(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JMethodRecord value4(String value) {
        setMethodName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JMethodRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JMethodRecord
     */
    public JMethodRecord() {
        super(JMethod.METHOD);
    }

    /**
     * Create a detached, initialised JMethodRecord
     */
    public JMethodRecord(String methodId, String classId, String descriptor, String methodName) {
        super(JMethod.METHOD);

        set(0, methodId);
        set(1, classId);
        set(2, descriptor);
        set(3, methodName);
    }
}
