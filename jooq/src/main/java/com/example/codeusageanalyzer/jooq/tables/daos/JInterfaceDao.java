/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables.daos;


import com.example.codeusageanalyzer.jooq.tables.JInterface;
import com.example.codeusageanalyzer.jooq.tables.pojos.JInterfacePojo;
import com.example.codeusageanalyzer.jooq.tables.records.JInterfaceRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JInterfaceDao extends DAOImpl<JInterfaceRecord, JInterfacePojo, String> {

    /**
     * Create a new JInterfaceDao without any configuration
     */
    public JInterfaceDao() {
        super(JInterface.INTERFACE, JInterfacePojo.class);
    }

    /**
     * Create a new JInterfaceDao with an attached configuration
     */
    public JInterfaceDao(Configuration configuration) {
        super(JInterface.INTERFACE, JInterfacePojo.class, configuration);
    }

    @Override
    public String getId(JInterfacePojo object) {
        return object.getInterfaceId();
    }

    /**
     * Fetch records that have <code>INTERFACE_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JInterfacePojo> fetchRangeOfJInterfaceId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInterface.INTERFACE.INTERFACE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>INTERFACE_ID IN (values)</code>
     */
    public List<JInterfacePojo> fetchByJInterfaceId(String... values) {
        return fetch(JInterface.INTERFACE.INTERFACE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>INTERFACE_ID = value</code>
     */
    public JInterfacePojo fetchOneByJInterfaceId(String value) {
        return fetchOne(JInterface.INTERFACE.INTERFACE_ID, value);
    }

    /**
     * Fetch records that have <code>CLASS_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JInterfacePojo> fetchRangeOfJClassId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInterface.INTERFACE.CLASS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CLASS_ID IN (values)</code>
     */
    public List<JInterfacePojo> fetchByJClassId(String... values) {
        return fetch(JInterface.INTERFACE.CLASS_ID, values);
    }

    /**
     * Fetch records that have <code>INTERFACE_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JInterfacePojo> fetchRangeOfJInterfaceName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInterface.INTERFACE.INTERFACE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>INTERFACE_NAME IN (values)</code>
     */
    public List<JInterfacePojo> fetchByJInterfaceName(String... values) {
        return fetch(JInterface.INTERFACE.INTERFACE_NAME, values);
    }
}
