/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables;


import com.example.codeusageanalyzer.jooq.DefaultSchema;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JModuleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JModule extends TableImpl<JModuleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MODULE</code>
     */
    public static final JModule MODULE = new JModule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JModuleRecord> getRecordType() {
        return JModuleRecord.class;
    }

    /**
     * The column <code>MODULE.MODULE_ID</code>.
     */
    public final TableField<JModuleRecord, String> MODULE_ID = createField(DSL.name("MODULE_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MODULE.ARTIFACT_ID</code>.
     */
    public final TableField<JModuleRecord, String> ARTIFACT_ID = createField(DSL.name("ARTIFACT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MODULE.GROUP_ID</code>.
     */
    public final TableField<JModuleRecord, String> GROUP_ID = createField(DSL.name("GROUP_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MODULE.PATH</code>.
     */
    public final TableField<JModuleRecord, String> PATH = createField(DSL.name("PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MODULE.REPOSITORY_ID</code>.
     */
    public final TableField<JModuleRecord, String> REPOSITORY_ID = createField(DSL.name("REPOSITORY_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MODULE.VERSION</code>.
     */
    public final TableField<JModuleRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private JModule(Name alias, Table<JModuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private JModule(Name alias, Table<JModuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MODULE</code> table reference
     */
    public JModule(String alias) {
        this(DSL.name(alias), MODULE);
    }

    /**
     * Create an aliased <code>MODULE</code> table reference
     */
    public JModule(Name alias) {
        this(alias, MODULE);
    }

    /**
     * Create a <code>MODULE</code> table reference
     */
    public JModule() {
        this(DSL.name("MODULE"), null);
    }

    public <O extends Record> JModule(Table<O> child, ForeignKey<O, JModuleRecord> key) {
        super(child, key, MODULE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JModuleRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_87;
    }

    @Override
    public List<UniqueKey<JModuleRecord>> getKeys() {
        return Arrays.<UniqueKey<JModuleRecord>>asList(Keys.CONSTRAINT_87);
    }

    @Override
    public JModule as(String alias) {
        return new JModule(DSL.name(alias), this);
    }

    @Override
    public JModule as(Name alias) {
        return new JModule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JModule rename(String name) {
        return new JModule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JModule rename(Name name) {
        return new JModule(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
