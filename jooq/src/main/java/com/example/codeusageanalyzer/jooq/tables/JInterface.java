/*
 * This file is generated by jOOQ.
*/
package com.example.codeusageanalyzer.jooq.tables;


import com.example.codeusageanalyzer.jooq.JPublic;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JInterfaceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JInterface extends TableImpl<JInterfaceRecord> {

    private static final long serialVersionUID = -1411290000;

    /**
     * The reference instance of <code>PUBLIC.INTERFACE</code>
     */
    public static final JInterface INTERFACE = new JInterface();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JInterfaceRecord> getRecordType() {
        return JInterfaceRecord.class;
    }

    /**
     * The column <code>PUBLIC.INTERFACE.INTERFACE_ID</code>.
     */
    public final TableField<JInterfaceRecord, String> INTERFACE_ID = createField("INTERFACE_ID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.INTERFACE.CLASS_ID</code>.
     */
    public final TableField<JInterfaceRecord, String> CLASS_ID = createField("CLASS_ID", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.INTERFACE.INTERFACE_NAME</code>.
     */
    public final TableField<JInterfaceRecord, String> INTERFACE_NAME = createField("INTERFACE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.INTERFACE</code> table reference
     */
    public JInterface() {
        this("INTERFACE", null);
    }

    /**
     * Create an aliased <code>PUBLIC.INTERFACE</code> table reference
     */
    public JInterface(String alias) {
        this(alias, INTERFACE);
    }

    private JInterface(String alias, Table<JInterfaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private JInterface(String alias, Table<JInterfaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JInterfaceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JInterfaceRecord>> getKeys() {
        return Arrays.<UniqueKey<JInterfaceRecord>>asList(Keys.CONSTRAINT_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JInterface as(String alias) {
        return new JInterface(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JInterface rename(String name) {
        return new JInterface(name, null);
    }
}
