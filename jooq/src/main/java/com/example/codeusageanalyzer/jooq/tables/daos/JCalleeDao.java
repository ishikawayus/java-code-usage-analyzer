/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables.daos;


import com.example.codeusageanalyzer.jooq.tables.JCallee;
import com.example.codeusageanalyzer.jooq.tables.pojos.JCalleePojo;
import com.example.codeusageanalyzer.jooq.tables.records.JCalleeRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCalleeDao extends DAOImpl<JCalleeRecord, JCalleePojo, String> {

    /**
     * Create a new JCalleeDao without any configuration
     */
    public JCalleeDao() {
        super(JCallee.CALLEE, JCalleePojo.class);
    }

    /**
     * Create a new JCalleeDao with an attached configuration
     */
    public JCalleeDao(Configuration configuration) {
        super(JCallee.CALLEE, JCalleePojo.class, configuration);
    }

    @Override
    public String getId(JCalleePojo object) {
        return object.getCalleeId();
    }

    /**
     * Fetch records that have <code>CALLEE_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJCalleeId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCallee.CALLEE.CALLEE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CALLEE_ID IN (values)</code>
     */
    public List<JCalleePojo> fetchByJCalleeId(String... values) {
        return fetch(JCallee.CALLEE.CALLEE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>CALLEE_ID = value</code>
     */
    public JCalleePojo fetchOneByJCalleeId(String value) {
        return fetchOne(JCallee.CALLEE.CALLEE_ID, value);
    }

    /**
     * Fetch records that have <code>DESCRIPTOR BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJDescriptor(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCallee.CALLEE.DESCRIPTOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DESCRIPTOR IN (values)</code>
     */
    public List<JCalleePojo> fetchByJDescriptor(String... values) {
        return fetch(JCallee.CALLEE.DESCRIPTOR, values);
    }

    /**
     * Fetch records that have <code>INVOKE_DYNAMIC BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJInvokeDynamic(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(JCallee.CALLEE.INVOKE_DYNAMIC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>INVOKE_DYNAMIC IN (values)</code>
     */
    public List<JCalleePojo> fetchByJInvokeDynamic(Boolean... values) {
        return fetch(JCallee.CALLEE.INVOKE_DYNAMIC, values);
    }

    /**
     * Fetch records that have <code>METHOD_ID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJMethodId(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCallee.CALLEE.METHOD_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>METHOD_ID IN (values)</code>
     */
    public List<JCalleePojo> fetchByJMethodId(String... values) {
        return fetch(JCallee.CALLEE.METHOD_ID, values);
    }

    /**
     * Fetch records that have <code>METHOD_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJMethodName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCallee.CALLEE.METHOD_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>METHOD_NAME IN (values)</code>
     */
    public List<JCalleePojo> fetchByJMethodName(String... values) {
        return fetch(JCallee.CALLEE.METHOD_NAME, values);
    }

    /**
     * Fetch records that have <code>OWNER_NAME BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<JCalleePojo> fetchRangeOfJOwnerName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCallee.CALLEE.OWNER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>OWNER_NAME IN (values)</code>
     */
    public List<JCalleePojo> fetchByJOwnerName(String... values) {
        return fetch(JCallee.CALLEE.OWNER_NAME, values);
    }
}
