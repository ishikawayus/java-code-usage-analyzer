/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables;


import com.example.codeusageanalyzer.jooq.DefaultSchema;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JDependencyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDependency extends TableImpl<JDependencyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEPENDENCY</code>
     */
    public static final JDependency DEPENDENCY = new JDependency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDependencyRecord> getRecordType() {
        return JDependencyRecord.class;
    }

    /**
     * The column <code>DEPENDENCY.DEPENDENCY_ID</code>.
     */
    public final TableField<JDependencyRecord, String> DEPENDENCY_ID = createField(DSL.name("DEPENDENCY_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCY.ARTIFACT_ID</code>.
     */
    public final TableField<JDependencyRecord, String> ARTIFACT_ID = createField(DSL.name("ARTIFACT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCY.GROUP_ID</code>.
     */
    public final TableField<JDependencyRecord, String> GROUP_ID = createField(DSL.name("GROUP_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCY.MODULE_ID</code>.
     */
    public final TableField<JDependencyRecord, String> MODULE_ID = createField(DSL.name("MODULE_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DEPENDENCY.VERSION</code>.
     */
    public final TableField<JDependencyRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private JDependency(Name alias, Table<JDependencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private JDependency(Name alias, Table<JDependencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DEPENDENCY</code> table reference
     */
    public JDependency(String alias) {
        this(DSL.name(alias), DEPENDENCY);
    }

    /**
     * Create an aliased <code>DEPENDENCY</code> table reference
     */
    public JDependency(Name alias) {
        this(alias, DEPENDENCY);
    }

    /**
     * Create a <code>DEPENDENCY</code> table reference
     */
    public JDependency() {
        this(DSL.name("DEPENDENCY"), null);
    }

    public <O extends Record> JDependency(Table<O> child, ForeignKey<O, JDependencyRecord> key) {
        super(child, key, DEPENDENCY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<JDependencyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<JDependencyRecord>> getKeys() {
        return Arrays.<UniqueKey<JDependencyRecord>>asList(Keys.CONSTRAINT_1);
    }

    @Override
    public JDependency as(String alias) {
        return new JDependency(DSL.name(alias), this);
    }

    @Override
    public JDependency as(Name alias) {
        return new JDependency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDependency rename(String name) {
        return new JDependency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDependency rename(Name name) {
        return new JDependency(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
