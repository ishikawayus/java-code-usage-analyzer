/*
 * This file is generated by jOOQ.
 */
package com.example.codeusageanalyzer.jooq.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import com.example.codeusageanalyzer.jooq.JPublic;
import com.example.codeusageanalyzer.jooq.Keys;
import com.example.codeusageanalyzer.jooq.tables.records.JClassRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.9.6" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JClass extends TableImpl<JClassRecord> {

    private static final long serialVersionUID = 669802858;

    /**
     * The reference instance of <code>PUBLIC.CLASS</code>
     */
    public static final JClass CLASS = new JClass();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JClassRecord> getRecordType() {
        return JClassRecord.class;
    }

    /**
     * The column <code>PUBLIC.CLASS.CLASS_ID</code>.
     */
    public final TableField<JClassRecord, Long> CLASS_ID = createField("CLASS_ID",
            org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CLASS.CLASS_NAME</code>.
     */
    public final TableField<JClassRecord, String> CLASS_NAME = createField("CLASS_NAME",
            org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CLASS.MODULE_ID</code>.
     */
    public final TableField<JClassRecord, Long> MODULE_ID = createField("MODULE_ID",
            org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CLASS.SUPER_CLASS_NAME</code>.
     */
    public final TableField<JClassRecord, String> SUPER_CLASS_NAME = createField("SUPER_CLASS_NAME",
            org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.CLASS</code> table reference
     */
    public JClass() {
        this("CLASS", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CLASS</code> table reference
     */
    public JClass(String alias) {
        this(alias, CLASS);
    }

    private JClass(String alias, Table<JClassRecord> aliased) {
        this(alias, aliased, null);
    }

    private JClass(String alias, Table<JClassRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JClassRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLASS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JClassRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JClassRecord>> getKeys() {
        return Arrays.<UniqueKey<JClassRecord>>asList(Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JClass as(String alias) {
        return new JClass(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JClass rename(String name) {
        return new JClass(name, null);
    }
}
